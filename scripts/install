#!/bin/bash

source .fonctions	# Charge les fonctions génériques habituellement utilisées dans le script

CLEAN_SETUP () {
# Nettoyage des résidus d'installation non pris en charge par le script remove.
# Pas de nettoyage supplémentaire nécessaire ici...
	echo ""
}
TRAP_ON	# Active trap pour arrêter le script si une erreur est détectée.

# Retrieve arguments
domain=$YNH_APP_ARG_DOMAIN
path=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC

app=$YNH_APP_INSTANCE_NAME

# Source app helpers
source /usr/share/yunohost/helpers

# Vérifie que les variables ne sont pas vides.
CHECK_VAR "$app" "app name not set"


CHECK_USER "$admin"	# Vérifie la validité de l'user admin

CHECK_PATH	# Vérifie et corrige la syntaxe du path.
CHECK_DOMAINPATH	# Vérifie la disponibilité du path et du domaine.

CHECK_FINALPATH	# Vérifie que le dossier de destination n'est pas déjà utilisé.


FIND_PORT 8095	# Cherche un port libre.
# Ouvre le port dans le firewall
sudo yunohost firewall allow --no-upnp TCP $port > /dev/null 2>&1


# Enregistre les infos dans la config YunoHost
ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path
ynh_app_setting_set $app admin $admin
ynh_app_setting_set $app is_public $is_public
ynh_app_setting_set $app port $port

GENERATE_DB $app	# Créer une base de données et un utilisateur dédié au nom de l'app.


# Créer le repertoire de destination et stocke son emplacement.
sudo mkdir "$final_path"
ynh_app_setting_set $app final_path $final_path

SETUP_SOURCE "APP_NAME.tar.gz"	# Télécharge la source, décompresse et copie dans $final_path

# Et copie le fichier de config nginx
sudo cp ../conf/nginx.conf /etc/nginx/conf.d/$domain.d/$app.conf


# Modifie les variables dans le fichier de configuration nginx
sudo sed -i "s@__PATHTOCHANGE__@$path@g" /etc/nginx/conf.d/$domain.d/$app.conf
sudo sed -i "s@__FINALPATH__@$final_path@g" /etc/nginx/conf.d/$domain.d/$app.conf
sudo sed -i "s@__NAMETOCHANGE__@$app@g" /etc/nginx/conf.d/$domain.d/$app.conf
sudo sed -i "s@__PORT__@$port@g" /etc/nginx/conf.d/$domain.d/$app.conf

POOL_FPM	# Créer le fichier de configuration du pool php-fpm et le configure.


###
#! INSTALLATION SPÉCIFIQUE DU PAQUET

# Rend la page d'install publique pour curl
ynh_app_setting_set $app skipped_uris "/"
sudo yunohost app ssowatconf

# Copie ou modification d'un fichier de config
STORE_MD5_CONFIG "CONFIG_FILE" "$final_path/CONFIG_FILE"	# Enregistre la somme de contrôle du fichier de config
###


# Configure les droits d'accès au fichiers
# -rw-r--r-- sur les fichiers
sudo find $final_path -type f -print0 | xargs -0 sudo chmod 644
# drwxr-xr-x sur les dossiers
sudo find $final_path -type d -print0 | xargs -0 sudo chmod 755
# Les fichiers appartiennent à root
sudo chown -R root: $final_path


# Configuration de logrotate
sed -i "s@__APP__@$app@g" ../conf/logrotate
sudo cp ../conf/logrotate /etc/logrotate.d/$app


# Ajoute le service au monitoring de Yunohost.
sudo yunohost service add NAME_INIT.D --log "/var/log/FICHIER.log"

if [ "$is_public" = "No" ];
then	# Retire l'accès public
	ynh_app_setting_delete $app skipped_uris
fi
# Make app public if necessary
if [ "$is_public" = "Yes" ];
then
    ynh_app_setting_set $app skipped_uris "/"
fi

# Recharge la configuration Nginx
sudo service nginx reload
# Régénère la configuration de SSOwat
sudo yunohost app ssowatconf
